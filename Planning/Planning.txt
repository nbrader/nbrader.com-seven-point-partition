Enhancements:
    Classify the types of 4 bar linkage by behaviour, detect and display which the current one is.
        - Try classifying by how many discontinuities exist in angle solutions over all joints
    Make holding right click on a half bar show both solutions. Ideally make this allow both buttons to be held so you can see both solutions in action at once.
    Make releasing right click from a half bar select the solution with the opposite joint nearest the cursor.

    Bigger jobs:
        Make a new selection system:
            - All selectable parts of linkage exist in a list of selectables which are asked if they are being hovered by a 2D world position fed to them.
            - If they are within a given screen-space distance to the mouse cursor, they are hovered.
            - Every selectable has a bool which says whether it's been selected since the last time it either went from unhovered to hovered or every hovered item had been selected.
            - Whenever the user left clicks, the closest hovered selectable which hasn't yet been selected (according to the above mentioned bool) is selected and their bool is turned to true.
            - Whenever a selectable becomes hovered after not being hovered, it is added to the hovered list with a previouslySelected value of false.
            - After selecting a selectable, if all hovered selectables have been selected according to their bools, then all bools reset to false except the one just selected.
            - Whenever a selectable becomes unhovered it's previously selected flag goes back to zero (this should be handled by the list of hovered selectables storing pairs of selectables and previously selected bools such that it is reset by virtue of the pair being removed from the list).
            
        Make the currently selected selectable offer a UI of controls and properties to view in a "unity inspector" style on the side of the screen.
            - From here you can set:
                name
                length
                angle
                turn rate
                parent-child relationships
                pull relationships
        
        Make a system for building bigger mechanisms out of 4-bar linkages:
            - I could have something similar to what I have but instead of clicking and dragging from a half-bar I could make every linkage have a designated "driven half-bar" which by default will following the cursor when pressed but can also be associated with a joint to follow instead.
            - I could similarly have a designated "fixed bar" which is fixed to the background if not associated to another bar or fixed to another bar if it is associated to another bar.
            - It would then by more interesting to use trail renderers on nodes to see what shapes they trace out
            - Make it into a game: I could make the machines be required to solve puzzles like completing the task of touching some things while not touching others.